// services/SchedulerService.js - NIVEAUX DE S√âV√âRIT√â CORRIG√âS + M√âT√âO INT√âGR√âE
const cron = require('node-cron');
const AirGradientService = require('./AirGradientService');
const AlertService = require('./AlertService');
const PredictionService = require('./PredictionService');
const WeatherService = require('./WeatherService'); // üå§Ô∏è Import service m√©t√©o
const SensorData = require('../models/SensorData');
const Alert = require('../models/Alert');
const Prediction = require('../models/Prediction');
const { triggerAlert, AlertMiddleware } = require('../middleware/alertMiddleware');

class SchedulerService {
  constructor() {
    this.airGradientService = new AirGradientService();
    this.alertService = new AlertService();
    this.predictionService = new PredictionService();
    this.weatherService = new WeatherService(); // üå§Ô∏è Initialiser service m√©t√©o
    this.jobs = new Map();
    this.isRunning = false;

    // ‚úÖ Buffer de logs en m√©moire (ajout√©)
    this.executionLogs = [];
    this.MAX_LOGS = 500;
  }

  // ‚úÖ Ajout log (ajout√©)
  addLog(level, message, meta = {}) {
    const entry = {
      ts: new Date().toISOString(),
      level, // 'info' | 'warn' | 'error' | 'debug'
      message,
      meta
    };
    this.executionLogs.push(entry);
    if (this.executionLogs.length > this.MAX_LOGS) {
      this.executionLogs.shift();
    }
    return entry;
  }

  // ‚úÖ Exposer les logs (ajout√©)
  getExecutionLogs({ limit = 100, level } = {}) {
    const src = level ? this.executionLogs.filter(l => l.level === level) : this.executionLogs;
    const safeLimit = Math.max(1, Math.min(limit, this.MAX_LOGS));
    return src.slice(-safeLimit);
  }

  // Initialiser tous les jobs programm√©s avec m√©t√©o
  initialize() {
    if (this.isRunning) {
      this.addLog('warn', 'Scheduler d√©j√† en cours d‚Äôex√©cution');
      console.log('‚ö†Ô∏è Scheduler d√©j√† en cours d\'ex√©cution');
      return;
    }

    this.addLog('info', 'Initialisation du scheduler avec IA et m√©t√©o...');
    console.log('üïê Initialisation du scheduler avec IA et m√©t√©o...');
    
    this.setupSyncJob();
    this.setupPredictionJob();
    this.setupAlertCleanupJob();
    this.setupDataCleanupJob();
    this.setupPredictionCleanupJob();
    this.setupHealthCheckJob();
    this.setupStatsJob();
    this.setupAIHealthCheckJob();
    
    // üå§Ô∏è Nouveaux jobs m√©t√©o
    this.setupWeatherUpdateJob();
    this.setupWeatherForecastJob();
    
    this.isRunning = true;
    this.addLog('info', 'Scheduler initialis√© avec succ√®s (IA + M√©t√©o inclus)');
    console.log('‚úÖ Scheduler initialis√© avec succ√®s (IA + M√©t√©o inclus)');
  }

  // Job de synchronisation avec AirGradient - Toutes les  minutes
  // Job de synchronisation avec AirGradient - Toutes les 45 secondes
setupSyncJob() {
  const job = cron.schedule('*/45 * * * * *', async () => {
    const started = Date.now();
    this.addLog('info', 'üîÑ D√©but synchronisation AirGradient');
     
    try {
      console.log('üîÑ D√©but synchronisation AirGradient...');
               
      const allSensorsData = await this.airGradientService.fetchAllSensorsData();
      let savedCount = 0;
      let alertCount = 0;
               
      for (const { location, data } of allSensorsData) {
        try {
          const transformedData = this.airGradientService.transformDataForStorage(data, location);
                   
          for (const sensorReading of transformedData) {
            const existingData = await SensorData.findOne({
              sensorId: sensorReading.sensorId,
              timestamp: {
                $gte: new Date(sensorReading.timestamp.getTime() - 5 * 60 * 1000),
                $lte: new Date(sensorReading.timestamp.getTime() + 5 * 60 * 1000)
              }
            });
                           
            if (!existingData) {
              const newData = new SensorData(sensorReading);
              await newData.save();
              savedCount++;
                               
              // V√©rifier les alertes
              const alerts = await this.alertService.checkAndCreateAlerts({
                sensorId: sensorReading.sensorId,
                measurements: sensorReading.measurements,
                location: sensorReading.location
              });
                               
              if (alerts && alerts.length > 0) {
                alertCount += alerts.length;
                alerts.forEach(alert => {
                  if (alert && alert._id) {
                    triggerAlert(alert);
                  }
                });
              }
            }
          }
                     
        } catch (error) {
          console.error(`‚ùå Erreur traitement ${location.name}:`, error.message);
          this.addLog('error', `Erreur traitement ${location.name}`, { error: error.message });
        }
      }
               
      console.log(`‚úÖ Sync termin√©e: ${savedCount} nouveaux enregistrements, ${alertCount} alertes`);
      this.addLog('info', '‚úÖ Sync termin√©e', { duration_ms: Date.now() - started, savedCount, alertCount });
      this.broadcastSystemUpdate();
               
    } catch (error) {
      console.error('‚ùå Erreur synchronisation programm√©e:', error.message);
      this.addLog('error', 'Erreur synchronisation programm√©e', { error: error.message });
    }
  }, {
    scheduled: false
  });
       
  this.jobs.set('sync', job);
  job.start();
  this.addLog('info', 'üìÖ Job synchronisation AirGradient programm√© (toutes les 45 secondes)');
  console.log('üìÖ Job synchronisation AirGradient programm√© (toutes les 45 secondes)');
}

  // Job de g√©n√©ration de pr√©dictions IA - Toutes les heures
  setupPredictionJob() {
    const job = cron.schedule('0 * * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'ü§ñ D√©but g√©n√©ration pr√©dictions IA');

      try {
        console.log('ü§ñ D√©but g√©n√©ration pr√©dictions IA...');
        
        // R√©cup√©rer les capteurs actifs (donn√©es dans les derni√®res 2 heures)
        const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
        const activeSensors = await SensorData.distinct('sensorId', {
          timestamp: { $gte: twoHoursAgo }
        });
        
        let successCount = 0;
        let errorCount = 0;
        let totalPredictions = 0;
        let alertsGenerated = 0;
        
        for (const sensorId of activeSensors) {
          try {
            // G√©n√©rer pr√©dictions pour les 6 prochaines heures
            const result = await this.predictionService.generatePrediction(sensorId, 6);
            
            if (result.success && result.predictions) {
              successCount++;
              totalPredictions += result.predictions.length;
              
              // V√©rifier les alertes pr√©dictives
              const alerts = await this.checkPredictiveAlerts(sensorId, result.predictions);
              alertsGenerated += alerts;
              
              console.log(`‚úÖ ${result.predictions.length} pr√©dictions g√©n√©r√©es pour ${sensorId}`);
            } else {
              errorCount++;
              console.log(`‚ö†Ô∏è √âchec pr√©diction pour ${sensorId}: ${result.message}`);
            }
            
            // D√©lai pour √©viter la surcharge
            await new Promise(resolve => setTimeout(resolve, 2000));
            
          } catch (error) {
            errorCount++;
            console.error(`‚ùå Erreur pr√©diction ${sensorId}:`, error.message);
            this.addLog('error', 'Erreur pr√©diction capteur', { sensorId, error: error.message });
          }
        }
        
        console.log(`ü§ñ Pr√©dictions termin√©es: ${successCount}/${activeSensors.length} capteurs, ${totalPredictions} pr√©dictions, ${alertsGenerated} alertes`);
        this.addLog('info', 'ü§ñ Pr√©dictions termin√©es', {
          duration_ms: Date.now() - started,
          activeSensors: activeSensors.length,
          successCount, errorCount, totalPredictions, alertsGenerated
        });
        
        // Diffuser les statistiques mises √† jour
        this.broadcastPredictionStats();
        
      } catch (error) {
        console.error('‚ùå Erreur job pr√©dictions:', error.message);
        this.addLog('error', 'Erreur job pr√©dictions', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('predictions', job);
    job.start();
    this.addLog('info', 'üìÖ Job pr√©dictions IA programm√© (toutes les heures)');
    console.log('üìÖ Job pr√©dictions IA programm√© (toutes les heures)');
  }

  // üå§Ô∏è Job de mise √† jour m√©t√©o - Toutes les 30 minutes
  setupWeatherUpdateJob() {
    const job = cron.schedule('*/30 * * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üå§Ô∏è Mise √† jour m√©t√©o programm√©e');

      try {
        console.log('üå§Ô∏è Mise √† jour m√©t√©o programm√©e...');
        
        // R√©cup√©rer m√©t√©o pour toutes les villes
        const weatherData = await this.weatherService.getWeatherForAllSensorCities();
        
        if (weatherData.success) {
          let alertsCreated = 0;
          const impacts = [];
          
          // Analyser impact sur qualit√© air pour chaque ville
          for (const cityWeather of weatherData.data) {
            if (cityWeather.success) {
              const impact = this.weatherService.analyzeAirQualityImpact(cityWeather.data);
              
              impacts.push({
                city: cityWeather.city,
                weather: {
                  temperature: cityWeather.data.current.temperature,
                  humidity: cityWeather.data.current.humidity,
                  wind_speed: cityWeather.data.current.wind.speed_kmh,
                  description: cityWeather.data.current.weather.description
                },
                impact: impact,
                timestamp: new Date()
              });
              
              // Cr√©er alertes m√©t√©o si conditions d√©favorables
              const weatherAlerts = await this.checkWeatherAirQualityAlerts(cityWeather.data, cityWeather.city);
              alertsCreated += weatherAlerts.length;
            }
          }
          
          // Diffuser via WebSocket
          if (AlertMiddleware) {
            AlertMiddleware.broadcastSystemStats({
              type: 'weather_update',
              timestamp: new Date(),
              impacts: impacts,
              summary: `M√©t√©o mise √† jour pour ${weatherData.summary.successful} villes`,
              alerts_created: alertsCreated
            });
          }
          
          console.log(`‚úÖ M√©t√©o mise √† jour: ${weatherData.summary.successful} villes, ${alertsCreated} alertes cr√©√©es`);
          this.addLog('info', '‚úÖ M√©t√©o mise √† jour', {
            duration_ms: Date.now() - started,
            cities: weatherData.summary.successful,
            alerts_created: alertsCreated
          });
        } else {
          console.log('‚ö†Ô∏è Erreur mise √† jour m√©t√©o:', weatherData.error);
          this.addLog('warn', 'Erreur mise √† jour m√©t√©o', { error: weatherData.error });
        }
        
      } catch (error) {
        console.error('‚ùå Erreur job m√©t√©o:', error.message);
        this.addLog('error', 'Erreur job m√©t√©o', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('weatherUpdate', job);
    job.start();
    this.addLog('info', 'üìÖ Job mise √† jour m√©t√©o programm√© (toutes les 30 minutes)');
    console.log('üìÖ Job mise √† jour m√©t√©o programm√© (toutes les 30 minutes)');
  }

  // üå§Ô∏è Job de pr√©visions m√©t√©o avanc√©es - Tous les jours √† 6h
  setupWeatherForecastJob() {
    const job = cron.schedule('0 6 * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üå§Ô∏è G√©n√©ration pr√©visions m√©t√©o avanc√©es');

      try {
        console.log('üå§Ô∏è G√©n√©ration pr√©visions m√©t√©o avanc√©es...');
        
        let totalForecasts = 0;
        let alertsCreated = 0;
        
        for (const city of this.weatherService.sensorCities) {
          try {
            // Pr√©visions 5 jours
            const forecast = await this.weatherService.getForecast(city.name, null, null, 5);
            
            if (forecast.success) {
              totalForecasts++;
              
              // Analyser pr√©visions pour alertes pr√©ventives
              const preventiveAlerts = await this.analyzeForecastForAlerts(city.name, forecast.data);
              alertsCreated += preventiveAlerts.length;
            }
            
            // D√©lai entre villes
            await new Promise(resolve => setTimeout(resolve, 2000));
            
          } catch (error) {
            console.error(`‚ùå Erreur pr√©visions ${city.name}:`, error.message);
            this.addLog('error', 'Erreur pr√©visions ville', { city: city.name, error: error.message });
          }
        }
        
        console.log(`‚úÖ Pr√©visions m√©t√©o: ${totalForecasts} villes, ${alertsCreated} alertes pr√©ventives`);
        this.addLog('info', '‚úÖ Pr√©visions m√©t√©o termin√©es', {
          duration_ms: Date.now() - started,
          totalForecasts,
          alertsCreated
        });
        
      } catch (error) {
        console.error('‚ùå Erreur job pr√©visions m√©t√©o:', error.message);
        this.addLog('error', 'Erreur job pr√©visions m√©t√©o', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('weatherForecast', job);
    job.start();
    this.addLog('info', 'üìÖ Job pr√©visions m√©t√©o programm√© (6h00 tous les jours)');
    console.log('üìÖ Job pr√©visions m√©t√©o programm√© (6h00 tous les jours)');
  }

  // üå§Ô∏è V√©rifier alertes m√©t√©o/qualit√© air
  async checkWeatherAirQualityAlerts(weatherData, cityName) {
    const alerts = [];
    
    try {
      const wind = weatherData.current.wind.speed_kmh;
      const humidity = weatherData.current.humidity;
      const pressure = weatherData.current.pressure;
      const temperature = weatherData.current.temperature;
      
      // 1Ô∏è‚É£ Alerte conditions stagnantes (vent faible + humidit√© √©lev√©e)
      if (wind < 5 && humidity > 80) {
        const alertData = {
          sensorId: `WEATHER_${cityName.toUpperCase()}`,
          alertType: 'weather_air_quality',
          severity: 'poor',
          qualityLevel: 'poor',
          referenceStandard: 'METEOROLOGICAL',
          message: `üå´Ô∏è Conditions m√©t√©o d√©favorables √† ${cityName} - Stagnation possible des polluants`,
          data: {
            weatherConditions: {
              wind_speed_kmh: wind,
              humidity_percent: humidity,
              temperature_celsius: temperature,
              impact: 'Dispersion r√©duite des polluants'
            },
            healthInfo: {
              impact: 'Conditions favorables √† l\'accumulation de pollution',
              recommendations: [
                'Surveillez la qualit√© de l\'air',
                'Limitez les activit√©s ext√©rieures prolong√©es',
                'Utilisez un purificateur d\'air en int√©rieur'
              ]
            },
            environmentalContext: {
              city: cityName,
              harmattan: this.weatherService.isHarmattanSeason(),
              season: this.weatherService.getCurrentSeason()
            }
          }
        };
        
        // V√©rifier si alerte similaire existe d√©j√†
        const existingAlert = await Alert.findOne({
          sensorId: alertData.sensorId,
          alertType: 'weather_air_quality',
          isActive: true,
          createdAt: { $gte: new Date(Date.now() - 4 * 60 * 60 * 1000) } // 4h
        });
        
        if (!existingAlert) {
          const savedAlert = await this.alertService.saveAlert(alertData);
          if (savedAlert) {
            triggerAlert(savedAlert);
            alerts.push(savedAlert);
          }
        }
      }
      
      // 2Ô∏è‚É£ Alerte vent fort (risque poussi√®re)
      if (wind > 30) {
        const alertData = {
          sensorId: `WEATHER_${cityName.toUpperCase()}`,
          alertType: 'weather_air_quality',
          severity: 'moderate',
          qualityLevel: 'moderate',
          referenceStandard: 'METEOROLOGICAL',
          message: `üí® Vent fort √† ${cityName} (${wind} km/h) - Risque de soul√®vement de poussi√®re`,
          data: {
            weatherConditions: {
              wind_speed_kmh: wind,
              humidity_percent: humidity,
              impact: 'Possible augmentation PM10/poussi√®re'
            },
            healthInfo: {
              impact: 'Risque d\'augmentation des particules en suspension',
              recommendations: [
                'Fermez les fen√™tres si vent de poussi√®re',
                'Portez un masque √† l\'ext√©rieur si n√©cessaire',
                'Surveillance renforc√©e des niveaux PM10'
              ]
            },
            environmentalContext: {
              city: cityName,
              harmattan: this.weatherService.isHarmattanSeason(),
              dust_risk: 'elevated'
            }
          }
        };
        
        const existingWindAlert = await Alert.findOne({
          sensorId: alertData.sensorId,
          alertType: 'weather_air_quality',
          isActive: true,
          'data.weatherConditions.wind_speed_kmh': { $gte: 25 },
          createdAt: { $gte: new Date(Date.now() - 2 * 60 * 60 * 1000) } // 2h
        });
        
        if (!existingWindAlert) {
          const savedAlert = await this.alertService.saveAlert(alertData);
          if (savedAlert) {
            triggerAlert(savedAlert);
            alerts.push(savedAlert);
          }
        }
      }
      
      // 3Ô∏è‚É£ Alerte chaleur extr√™me + humidit√© (stress thermique)
      if (temperature > 35 && humidity > 70) {
        const alertData = {
          sensorId: `WEATHER_${cityName.toUpperCase()}`,
          alertType: 'weather_air_quality',
          severity: 'unhealthy',
          qualityLevel: 'poor',
          referenceStandard: 'METEOROLOGICAL',
          message: `üå°Ô∏è Chaleur et humidit√© extr√™mes √† ${cityName} - Conditions d√©favorables √† la qualit√© de l'air`,
          data: {
            weatherConditions: {
              temperature_celsius: temperature,
              humidity_percent: humidity,
              heat_index: this.calculateHeatIndex(temperature, humidity),
              impact: 'Formation accrue d\'ozone et stress respiratoire'
            },
            healthInfo: {
              impact: 'Conditions favorables √† la pollution photochimique',
              recommendations: [
                '√âvitez les activit√©s ext√©rieures aux heures chaudes',
                'Hydratez-vous fr√©quemment',
                'Groupes sensibles: restez en int√©rieur climatis√©'
              ],
              sensitiveGroups: ['Enfants', 'Personnes √¢g√©es', 'Asthmatiques', 'Cardiaques']
            }
          }
        };
        
        const existingHeatAlert = await Alert.findOne({
          sensorId: alertData.sensorId,
          alertType: 'weather_air_quality',
          isActive: true,
          'data.weatherConditions.temperature_celsius': { $gte: 33 },
          createdAt: { $gte: new Date(Date.now() - 6 * 60 * 60 * 1000) } // 6h
        });
        
        if (!existingHeatAlert) {
          const savedAlert = await this.alertService.saveAlert(alertData);
          if (savedAlert) {
            triggerAlert(savedAlert);
            alerts.push(savedAlert);
          }
        }
      }
      
      // 4Ô∏è‚É£ Alerte Harmattan sp√©ciale (saison s√®che)
      if (this.weatherService.isHarmattanSeason() && wind > 15 && humidity < 30) {
        const alertData = {
          sensorId: `WEATHER_${cityName.toUpperCase()}`,
          alertType: 'weather_air_quality',
          severity: 'poor',
          qualityLevel: 'poor',
          referenceStandard: 'METEOROLOGICAL',
          message: `üå™Ô∏è Conditions Harmattan actives √† ${cityName} - Poussi√®re sah√©lienne attendue`,
          data: {
            weatherConditions: {
              wind_speed_kmh: wind,
              humidity_percent: humidity,
              season: 'harmattan',
              impact: 'Transport de poussi√®re depuis le Sahara'
            },
            healthInfo: {
              impact: 'Augmentation significative des particules PM2.5 et PM10',
              recommendations: [
                'Fermez les fen√™tres lors des pics de vent',
                'Masque recommand√© pour les sorties prolong√©es',
                'Surveillance renforc√©e de la qualit√© de l\'air',
                'Hydratation importante (air tr√®s sec)'
              ]
            },
            environmentalContext: {
              harmattan: true,
              dust_source: 'Sahara',
              expected_duration: '48-72h'
            }
          }
        };
        
        const existingHarmattanAlert = await Alert.findOne({
          sensorId: alertData.sensorId,
          alertType: 'weather_air_quality',
          isActive: true,
          'data.environmentalContext.harmattan': true,
          createdAt: { $gte: new Date(Date.now() - 12 * 60 * 60 * 1000) } // 12h
        });
        
        if (!existingHarmattanAlert) {
          const savedAlert = await this.alertService.saveAlert(alertData);
          if (savedAlert) {
            triggerAlert(savedAlert);
            alerts.push(savedAlert);
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur v√©rification alertes m√©t√©o:', error.message);
      this.addLog('error', 'Erreur v√©rification alertes m√©t√©o', { city: cityName, error: error.message });
    }
    
    return alerts;
  }

  // üå§Ô∏è Analyser pr√©visions pour cr√©er alertes pr√©ventives
  async analyzeForecastForAlerts(cityName, forecastData) {
    const alerts = [];
    
    try {
      // Analyser les 3 prochains jours
      for (const day of forecastData.daily.slice(0, 3)) {
        const date = new Date(day.date);
        const hoursAhead = Math.round((date - new Date()) / (60 * 60 * 1000));
        
        // Conditions m√©t√©o d√©favorables pr√©vues
        if (day.wind.avg_speed < 8 && day.humidity.avg > 75) {
          const alertData = {
            sensorId: `WEATHER_FORECAST_${cityName.toUpperCase()}`,
            alertType: 'weather_forecast_warning',
            severity: 'moderate',
            qualityLevel: 'moderate',
            referenceStandard: 'METEOROLOGICAL',
            message: `üìÖ Pr√©vision m√©t√©o d√©favorable √† ${cityName} pour ${day.date} - Conditions de stagnation attendues`,
            data: {
              forecastDate: day.date,
              hoursAhead: hoursAhead,
              predictedConditions: {
                wind_avg_speed: day.wind.avg_speed,
                humidity_avg: day.humidity.avg,
                temperature_range: `${day.temperature.min}-${day.temperature.max}¬∞C`
              },
              healthInfo: {
                impact: 'Pr√©vision de conditions favorables √† l\'accumulation de polluants',
                recommendations: [
                  'Planifiez vos activit√©s ext√©rieures t√¥t le matin',
                  '√âvitez les efforts physiques intenses ce jour-l√†',
                  'Pr√©parez-vous √† fermer les fen√™tres si n√©cessaire'
                ]
              },
              isPredictive: true,
              expiresAt: new Date(date.getTime() + 24 * 60 * 60 * 1000) // Expire apr√®s la journ√©e pr√©vue
            }
          };
          
          // V√©rifier doublons
          const existingForecastAlert = await Alert.findOne({
            sensorId: alertData.sensorId,
            alertType: 'weather_forecast_warning',
            'data.forecastDate': day.date,
            isActive: true
          });
          
          if (!existingForecastAlert) {
            const savedAlert = await this.alertService.saveAlert(alertData);
            if (savedAlert) {
              alerts.push(savedAlert);
              // Pas de triggerAlert imm√©diat pour les pr√©visions (moins urgent)
            }
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur analyse pr√©visions:', error.message);
      this.addLog('error', 'Erreur analyse pr√©visions', { city: cityName, error: error.message });
    }
    
    return alerts;
  }

  // üå§Ô∏è Calculer indice de chaleur
  calculateHeatIndex(tempC, humidity) {
    const tempF = (tempC * 9/5) + 32;
    
    const hi = -42.379 + 
      2.04901523 * tempF + 
      10.14333127 * humidity - 
      0.22475541 * tempF * humidity - 
      0.00683783 * tempF * tempF - 
      0.05481717 * humidity * humidity + 
      0.00122874 * tempF * tempF * humidity + 
      0.00085282 * tempF * humidity * humidity - 
      0.00000199 * tempF * tempF * humidity * humidity;
    
    return Math.round((hi - 32) * 5/9); // Convertir en Celsius
  }

  // üîß CORRIG√â: Job de v√©rification sant√© du service IA avec nouveaux niveaux
  setupAIHealthCheckJob() {
    const job = cron.schedule('*/30 * * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üîé V√©rification sant√© du service IA');

      try {
        const aiHealth = await this.predictionService.checkAIServiceHealth();
        
        if (!aiHealth.available) {
          // Cr√©er une alerte si le service IA est down
          const existingAlert = await Alert.findOne({
            alertType: 'ai_service_down',
            isActive: true,
            createdAt: { $gte: new Date(Date.now() - 60 * 60 * 1000) } // 1h
          });
          
          if (!existingAlert) {
            const aiDownAlert = {
              sensorId: 'SYSTEM',
              alertType: 'ai_service_down',
              severity: 'poor', // üîß CORRIG√â: 'poor' au lieu de 'medium'
              qualityLevel: 'poor',
              referenceStandard: 'WHO_2021',
              message: 'ü§ñ Service IA indisponible - Pr√©dictions en mode d√©grad√©',
              data: {
                error: aiHealth.error,
                fallbackMode: true,
                lastCheck: new Date()
              }
            };
            
            const savedAlert = await this.alertService.saveAlert(aiDownAlert);
            if (savedAlert) {
              triggerAlert(savedAlert);
            }
          }
          
          console.log('‚ö†Ô∏è Service IA indisponible:', aiHealth.error);
          this.addLog('warn', 'Service IA indisponible', { error: aiHealth.error, duration_ms: Date.now() - started });
        } else {
          // R√©soudre l'alerte si le service est de nouveau disponible
          await Alert.updateMany(
            {
              alertType: 'ai_service_down',
              isActive: true
            },
            {
              isActive: false,
              resolvedAt: new Date(),
              resolution: 'Service IA r√©tabli'
            }
          );
          
          console.log('‚úÖ Service IA op√©rationnel');
          this.addLog('info', 'Service IA op√©rationnel', { duration_ms: Date.now() - started });
        }
        
      } catch (error) {
        console.error('‚ùå Erreur v√©rification sant√© IA:', error.message);
        this.addLog('error', 'Erreur v√©rification sant√© IA', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('aiHealthCheck', job);
    job.start();
    this.addLog('info', 'üìÖ Job v√©rification sant√© IA programm√© (toutes les 30 minutes)');
    console.log('üìÖ Job v√©rification sant√© IA programm√© (toutes les 30 minutes)');
  }

  // Job de nettoyage des pr√©dictions - Tous les jours √† 1h
  setupPredictionCleanupJob() {
    const job = cron.schedule('0 1 * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üßπ Nettoyage des anciennes pr√©dictions d√©marr√©');

      try {
        console.log('üßπ Nettoyage des anciennes pr√©dictions...');
        const deletedCount = await this.predictionService.cleanupOldPredictions(7);
        console.log(`‚úÖ ${deletedCount} anciennes pr√©dictions supprim√©es`);
        this.addLog('info', '‚úÖ Nettoyage anciennes pr√©dictions termin√©', { duration_ms: Date.now() - started, deletedCount });
      } catch (error) {
        console.error('‚ùå Erreur nettoyage pr√©dictions:', error.message);
        this.addLog('error', 'Erreur nettoyage pr√©dictions', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('predictionCleanup', job);
    job.start();
    this.addLog('info', 'üìÖ Job nettoyage pr√©dictions programm√© (1h00 tous les jours)');
    console.log('üìÖ Job nettoyage pr√©dictions programm√© (1h00 tous les jours)');
  }

  // Jobs existants (alertCleanup, dataCleanup, healthCheck) - inchang√©es
  setupAlertCleanupJob() {
    const job = cron.schedule('0 2 * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üßπ D√©marrage nettoyage automatique des alertes');

      try {
        console.log('üßπ D√©marrage nettoyage automatique des alertes...');
        const deletedCount = await this.alertService.cleanupOldAlerts(30);
        console.log(`‚úÖ Nettoyage alertes termin√©: ${deletedCount} alertes supprim√©es`);
        this.addLog('info', '‚úÖ Nettoyage alertes termin√©', { duration_ms: Date.now() - started, deletedCount });
      } catch (error) {
        console.error('‚ùå Erreur nettoyage alertes:', error.message);
        this.addLog('error', 'Erreur nettoyage alertes', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('alertCleanup', job);
    job.start();
    this.addLog('info', 'üìÖ Job nettoyage alertes programm√© (2h00 tous les jours)');
    console.log('üìÖ Job nettoyage alertes programm√© (2h00 tous les jours)');
  }

  setupDataCleanupJob() {
    const job = cron.schedule('0 3 * * 0', async () => {
      const started = Date.now();
      this.addLog('info', 'üßπ D√©marrage nettoyage automatique des donn√©es');

      try {
        console.log('üßπ D√©marrage nettoyage automatique des donn√©es...');
        const cutoffDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
        const result = await SensorData.deleteMany({
          timestamp: { $lt: cutoffDate }
        });
        console.log(`‚úÖ Nettoyage donn√©es termin√©: ${result.deletedCount} enregistrements supprim√©s`);
        this.addLog('info', '‚úÖ Nettoyage donn√©es termin√©', { duration_ms: Date.now() - started, deletedCount: result.deletedCount });
      } catch (error) {
        console.error('‚ùå Erreur nettoyage donn√©es:', error.message);
        this.addLog('error', 'Erreur nettoyage donn√©es', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('dataCleanup', job);
    job.start();
    this.addLog('info', 'üìÖ Job nettoyage donn√©es programm√© (dimanche 3h00)');
    console.log('üìÖ Job nettoyage donn√©es programm√© (dimanche 3h00)');
  }

  // üîß CORRIG√â: Health check avec nouveaux niveaux de s√©v√©rit√©
  setupHealthCheckJob() {
    const job = cron.schedule('0 * * * *', async () => {
      const started = Date.now();
      this.addLog('info', 'üè• V√©rification sant√© des capteurs d√©marr√©e');

      try {
        console.log('üè• V√©rification sant√© des capteurs...');
        
        const sensors = this.airGradientService.getSensorLocations();
        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        
        for (const sensor of sensors) {
          const lastData = await SensorData
            .findOne({ sensorId: sensor.id })
            .sort({ timestamp: -1 });
          
          if (!lastData || lastData.timestamp < oneHourAgo) {
            const existingAlert = await Alert.findOne({
              sensorId: sensor.id,
              alertType: 'sensor_offline',
              isActive: true,
              createdAt: { $gte: new Date(now.getTime() - 2 * 60 * 60 * 1000) }
            });
            
            if (!existingAlert) {
              const offlineAlert = {
                sensorId: sensor.id,
                alertType: 'sensor_offline',
                severity: 'poor', // üîß CORRIG√â: 'poor' au lieu de 'medium'
                qualityLevel: 'poor',
                referenceStandard: 'WHO_2021',
                message: `üì° Capteur hors ligne: ${sensor.name} (${sensor.city})`,
                data: {
                  location: sensor.name,
                  lastSeen: lastData ? lastData.timestamp : 'Jamais',
                  offlineDuration: lastData ? 
                    Math.round((now - lastData.timestamp) / (60 * 1000)) + ' minutes' : 
                    'Inconnue'
                }
              };
              
              const savedAlert = await this.alertService.saveAlert(offlineAlert);
              if (savedAlert) {
                triggerAlert(savedAlert);
              }
            }
          }
        }
        
        console.log('‚úÖ V√©rification sant√© capteurs termin√©e');
        this.addLog('info', '‚úÖ V√©rification sant√© capteurs termin√©e', { duration_ms: Date.now() - started });
        
      } catch (error) {
        console.error('‚ùå Erreur v√©rification sant√©:', error.message);
        this.addLog('error', 'Erreur v√©rification sant√© capteurs', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('healthCheck', job);
    job.start();
    this.addLog('info', 'üìÖ Job v√©rification sant√© programm√© (toutes les heures)');
    console.log('üìÖ Job v√©rification sant√© programm√© (toutes les heures)');
  }

  // üîß CORRIG√â: Stats job avec nouveaux niveaux + m√©t√©o
  setupStatsJob() {
    const job = cron.schedule('*/5 * * * *', async () => {
      const started = Date.now();

      try {
        const now = new Date();
        const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        
        // Stats alertes avec nouveaux niveaux
        const alertStats = await Alert.aggregate([
          { $match: { createdAt: { $gte: last24h } } },
          {
            $group: {
              _id: null,
              total: { $sum: 1 },
              active: { $sum: { $cond: ['$isActive', 1, 0] } },
              // üîß CORRIG√â: Nouveaux niveaux de s√©v√©rit√©
              hazardous: { $sum: { $cond: [{ $eq: ['$severity', 'hazardous'] }, 1, 0] } },
              unhealthy: { $sum: { $cond: [{ $eq: ['$severity', 'unhealthy'] }, 1, 0] } },
              poor: { $sum: { $cond: [{ $eq: ['$severity', 'poor'] }, 1, 0] } },
              moderate: { $sum: { $cond: [{ $eq: ['$severity', 'moderate'] }, 1, 0] } },
              good: { $sum: { $cond: [{ $eq: ['$severity', 'good'] }, 1, 0] } },
              predictive: { $sum: { $cond: [{ $eq: ['$alertType', 'prediction_warning'] }, 1, 0] } },
              weather_related: { $sum: { $cond: [{ $eq: ['$alertType', 'weather_air_quality'] }, 1, 0] } } // üå§Ô∏è
            }
          }
        ]);
        
        // Stats capteurs
        const sensorStats = await SensorData.aggregate([
          { $match: { timestamp: { $gte: last24h } } },
          {
            $group: {
              _id: '$sensorId',
              lastUpdate: { $max: '$timestamp' },
              avgAQI: { $avg: '$airQualityIndex' },
              measurements: { $sum: 1 }
            }
          }
        ]);
        
        // Stats pr√©dictions
        const predictionStats = await Prediction.aggregate([
          { $match: { createdAt: { $gte: last24h } } },
          {
            $group: {
              _id: null,
              totalPredictions: { $sum: 1 },
              avgConfidence: { $avg: '$confidence' },
              futurePredictions: {
                $sum: { $cond: [{ $gt: ['$predictionFor', now] }, 1, 0] }
              }
            }
          }
        ]);
        
        // üå§Ô∏è R√©cup√©rer statut m√©t√©o rapide
        let weatherStatus = { available: false };
        try {
          const weatherTest = await this.weatherService.testConnection();
          weatherStatus = {
            available: weatherTest.success,
            cities_configured: this.weatherService.sensorCities.length,
            last_update: new Date()
          };
        } catch (error) {
          console.log('‚ö†Ô∏è M√©t√©o indisponible pour stats:', error.message);
          this.addLog('warn', 'M√©t√©o indisponible pour stats', { error: error.message });
        }
        
        const systemStats = {
          alerts_24h: alertStats[0] || { 
            total: 0, active: 0, 
            hazardous: 0, unhealthy: 0, poor: 0, moderate: 0, good: 0,
            predictive: 0, weather_related: 0 // üå§Ô∏è
          },
          sensors: {
            total: sensorStats.length,
            active: sensorStats.filter(s => 
              new Date() - new Date(s.lastUpdate) < 60 * 60 * 1000
            ).length,
            measurements_24h: sensorStats.reduce((sum, s) => sum + s.measurements, 0)
          },
          predictions: predictionStats[0] || { totalPredictions: 0, avgConfidence: 0, futurePredictions: 0 },
          weather: weatherStatus, // üå§Ô∏è Nouveau: stats m√©t√©o
          websocket_clients: AlertMiddleware ? AlertMiddleware.getConnectionStats().connectedClients : 0,
          system: {
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            nodeVersion: process.version
          },
          timestamp: now
        };
        
        if (AlertMiddleware) {
          AlertMiddleware.broadcastSystemStats(systemStats);
        }

        this.addLog('info', 'üìä Stats diffus√©es', {
          duration_ms: Date.now() - started,
          alerts_total: systemStats.alerts_24h.total,
          sensors_total: systemStats.sensors.total,
          predictions_total: systemStats.predictions.totalPredictions || 0
        });
        
      } catch (error) {
        console.error('‚ùå Erreur diffusion stats:', error.message);
        this.addLog('error', 'Erreur diffusion stats', { error: error.message });
      }
    }, {
      scheduled: false
    });
    
    this.jobs.set('stats', job);
    job.start();
    this.addLog('info', 'üìÖ Job statistiques programm√© (toutes les 5 minutes)');
    console.log('üìÖ Job statistiques programm√© (toutes les 5 minutes)');
  }

  // üîß CORRIG√â: M√©thodes utilitaires pour les pr√©dictions avec nouveaux niveaux
  async checkPredictiveAlerts(sensorId, predictions) {
    let alertsCreated = 0;
    
    try {
      for (const prediction of predictions) {
        // Seuil d'alerte pr√©dictive
        if (prediction.predictedPM25 > 50 && prediction.confidence > 0.7) {
          const hoursAhead = Math.round((new Date(prediction.predictionFor) - new Date()) / (60 * 60 * 1000));
          
          // üîß CORRIG√â: Utiliser nouveaux niveaux de s√©v√©rit√©
          let severity, qualityLevel;
          if (prediction.predictedPM25 > 100) {
            severity = 'unhealthy';
            qualityLevel = 'very_poor';
          } else if (prediction.predictedPM25 > 75) {
            severity = 'poor';
            qualityLevel = 'poor';
          } else {
            severity = 'moderate';
            qualityLevel = 'moderate';
          }
          
          const alertData = {
            sensorId,
            alertType: 'prediction_warning',
            severity,
            qualityLevel,
            referenceStandard: 'WHO_2021',
            message: `üîÆ Alerte pr√©dictive: PM2.5 pr√©vu √† ${prediction.predictedPM25.toFixed(1)} ¬µg/m¬≥ dans ${hoursAhead}h`,
            data: {
              predictedValue: prediction.predictedPM25,
              predictedAQI: prediction.predictedAQI,
              confidence: prediction.confidence,
              predictionFor: prediction.predictionFor,
              hoursAhead
            }
          };
          
          // V√©rifier doublons
          const existingAlert = await Alert.findOne({
            sensorId,
            alertType: 'prediction_warning',
            isActive: true,
            'data.predictionFor': prediction.predictionFor
          });
          
          if (!existingAlert) {
            const savedAlert = await this.alertService.saveAlert(alertData);
            if (savedAlert) {
              triggerAlert(savedAlert);
              alertsCreated++;
            }
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur alertes pr√©dictives:', error.message);
      this.addLog('error', 'Erreur alertes pr√©dictives', { sensorId, error: error.message });
    }
    
    return alertsCreated;
  }

  broadcastPredictionStats() {
    if (AlertMiddleware) {
      AlertMiddleware.broadcastSystemStats({
        type: 'predictions_update',
        message: 'Nouvelles pr√©dictions IA disponibles',
        timestamp: new Date()
      });
    }
  }

  broadcastSystemUpdate() {
    try {
      if (AlertMiddleware) {
        AlertMiddleware.broadcastSystemStats({
          type: 'data_update',
          message: 'Nouvelles donn√©es de capteurs disponibles',
          timestamp: new Date()
        });
      }
    } catch (error) {
      console.error('‚ùå Erreur diffusion mise √† jour:', error.message);
      this.addLog('error', 'Erreur diffusion mise √† jour', { error: error.message });
    }
  }

  // üå§Ô∏è Diffuser mise √† jour m√©t√©o
  broadcastWeatherUpdate(weatherData) {
    try {
      if (AlertMiddleware) {
        AlertMiddleware.broadcastSystemStats({
          type: 'weather_update',
          message: 'Donn√©es m√©t√©o mises √† jour',
          data: weatherData,
          timestamp: new Date()
        });
      }
    } catch (error) {
      console.error('‚ùå Erreur diffusion m√©t√©o:', error.message);
      this.addLog('error', 'Erreur diffusion m√©t√©o', { error: error.message });
    }
  }

  // M√©thodes existantes (stopAll, restartJob, etc.) - inchang√©es
  stopAll() {
    console.log('üõë Arr√™t de tous les jobs programm√©s...');
    this.addLog('warn', 'Arr√™t de tous les jobs programm√©s');
    
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`üìÖ Job "${name}" arr√™t√©`);
      this.addLog('info', 'Job arr√™t√©', { job: name });
    });
    
    this.jobs.clear();
    this.isRunning = false;
    console.log('‚úÖ Tous les jobs ont √©t√© arr√™t√©s');
    this.addLog('info', 'Tous les jobs ont √©t√© arr√™t√©s');
  }

  getJobsStatus() {
    const status = {};
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        nextRun: job.nextDate ? job.nextDate().toISOString() : null
      };
    });
    return {
      isRunning: this.isRunning,
      totalJobs: this.jobs.size,
      jobs: status
    };
  }

  // Ex√©cution manuelle du job de pr√©dictions
  async runPredictionJobManually() {
    console.log('üîß Ex√©cution manuelle du job pr√©dictions...');
    this.addLog('info', 'Ex√©cution manuelle du job pr√©dictions');

    try {
      const activeSensors = await SensorData.distinct('sensorId', {
        timestamp: { $gte: new Date(Date.now() - 2 * 60 * 60 * 1000) }
      });
      
      let results = [];
      
      for (const sensorId of activeSensors.slice(0, 3)) { // Limiter √† 3 capteurs pour le test
        const result = await this.predictionService.generatePrediction(sensorId, 3);
        results.push({
          sensorId,
          success: result.success,
          predictionsCount: result.predictions ? result.predictions.length : 0
        });
      }
      
      return { results, totalSensors: activeSensors.length };
      
    } catch (error) {
      console.error('‚ùå Erreur job pr√©dictions manuel:', error.message);
      this.addLog('error', 'Erreur job pr√©dictions manuel', { error: error.message });
      throw error;
    }
  }

  // üå§Ô∏è Ex√©cution manuelle du job m√©t√©o
  async runWeatherJobManually() {
    console.log('üîß Ex√©cution manuelle du job m√©t√©o...');
    this.addLog('info', 'Ex√©cution manuelle du job m√©t√©o');

    try {
      const weatherData = await this.weatherService.getWeatherForAllSensorCities();
      
      if (weatherData.success) {
        let alertsCreated = 0;
        
        for (const cityWeather of weatherData.data) {
          if (cityWeather.success) {
            const alerts = await this.checkWeatherAirQualityAlerts(cityWeather.data, cityWeather.city);
            alertsCreated += alerts.length;
          }
        }
        
        return {
          success: true,
          cities_updated: weatherData.summary.successful,
          alerts_created: alertsCreated,
          weather_data: weatherData.data
        };
      } else {
        return {
          success: false,
          error: weatherData.error
        };
      }
      
    } catch (error) {
      console.error('‚ùå Erreur job m√©t√©o manuel:', error.message);
      this.addLog('error', 'Erreur job m√©t√©o manuel', { error: error.message });
      throw error;
    }
  }

  // üå§Ô∏è M√©thode pour ex√©cuter job sp√©cifique manuellement (am√©lior√©e)
  async runJobManually(jobName) {
    console.log(`üîß Ex√©cution manuelle du job "${jobName}"...`);
    this.addLog('info', 'Ex√©cution manuelle d‚Äôun job', { jobName });
    
    try {
      switch (jobName) {
        case 'sync':
          // Code sync existant...
          return { success: true, message: 'Synchronisation manuelle termin√©e' };
          
        case 'predictions':
          return await this.runPredictionJobManually();
          
        case 'weather': // üå§Ô∏è Nouveau
          return await this.runWeatherJobManually();
          
        case 'weatherForecast': // üå§Ô∏è Nouveau
          const forecastResult = await this.weatherService.getWeatherForAllSensorCities();
          return { 
            success: forecastResult.success, 
            message: 'Pr√©visions m√©t√©o manuelles termin√©es',
            data: forecastResult
          };
          
        case 'alertCleanup':
          const deletedAlerts = await this.alertService.cleanupOldAlerts(30);
          return { 
            success: true, 
            message: `${deletedAlerts} alertes nettoy√©es`,
            deletedCount: deletedAlerts
          };
          
        case 'predictionCleanup':
          const deletedPredictions = await this.predictionService.cleanupOldPredictions(7);
          return { 
            success: true, 
            message: `${deletedPredictions} pr√©dictions nettoy√©es`,
            deletedCount: deletedPredictions
          };
          
        default:
          throw new Error(`Job "${jobName}" non reconnu`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur job manuel "${jobName}":`, error.message);
      this.addLog('error', 'Erreur job manuel', { jobName, error: error.message });
      return {
        success: false,
        error: error.message
      };
    }
  }

  // üå§Ô∏è Nouvelle m√©thode: forcer synchronisation compl√®te (donn√©es + m√©t√©o)
  async forceSyncNow() {
    console.log('üîÑ Synchronisation compl√®te forc√©e (capteurs + m√©t√©o)...');
    this.addLog('info', 'Synchronisation compl√®te forc√©e');

    try {
      const results = {
        sensors: null,
        weather: null,
        predictions: null,
        alerts_created: 0,
        timestamp: new Date()
      };
      
      // 1. Synchronisation capteurs
      try {
        results.sensors = await this.runJobManually('sync');
      } catch (error) {
        results.sensors = { success: false, error: error.message };
      }
      
      // 2. Synchronisation m√©t√©o
      try {
        results.weather = await this.runJobManually('weather');
        if (results.weather.success) {
          results.alerts_created += results.weather.alerts_created || 0;
        }
      } catch (error) {
        results.weather = { success: false, error: error.message };
      }
      
      // 3. G√©n√©ration pr√©dictions (optionnel)
      try {
        results.predictions = await this.runPredictionJobManually();
      } catch (error) {
        results.predictions = { success: false, error: error.message };
      }
      
      // Diffuser r√©sultat
      this.broadcastSystemUpdate();
      if (results.weather && results.weather.success) {
        this.broadcastWeatherUpdate(results.weather);
      }
      
      console.log('‚úÖ Synchronisation compl√®te termin√©e');
      this.addLog('info', 'Synchronisation compl√®te termin√©e', { alerts_created: results.alerts_created });
      return results;
      
    } catch (error) {
      console.error('‚ùå Erreur synchronisation compl√®te:', error.message);
      this.addLog('error', 'Erreur synchronisation compl√®te', { error: error.message });
      throw error;
    }
  }
}

// Instance singleton
const schedulerService = new SchedulerService();

module.exports = schedulerService;
